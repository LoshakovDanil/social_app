{"version":3,"file":"static/js/656.91a9eb64.chunk.js","mappings":"2OASaA,EAA4B,WACvC,IAAMC,GAAUC,EAAAA,EAAAA,QAA2B,MAErCC,GAAWC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,QAAQ,IAQ5D,OANAI,EAAAA,EAAAA,YAAU,WACJN,EAAQO,UACVP,EAAQO,QAAQC,UAAYR,EAAQO,QAAQE,aAEhD,GAAG,CAACP,KAGF,gBAAKQ,IAAKV,EAASW,MAAO,CAAEC,UAAW,QAASC,UAAW,QAAS,UAClE,SAAC,IAAI,CACHC,WAAW,aACXC,WAAYb,EACZc,WAAY,SAACC,EAAoBC,GAAK,OACpC,SAAC,SAAS,WACR,SAAC,cAAc,CACbC,QAAQ,SAAC,IAAM,CAACC,IAAG,gEAA2DF,KAC9EG,MAAOJ,EAAKK,KACZC,UAAW,OAEH,KAKtB,ECpCA,EAAkC,kCAAlC,EAAqF,iCAArF,EAAsI,gCC8DtI,EApDiB,WACf,IAAMC,GAASrB,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKmB,MAAM,IAElDC,GAAWC,EAAAA,EAAAA,MACjBpB,EAAAA,EAAAA,YAAU,WAER,OADAmB,GAASE,EAAAA,EAAAA,OACF,WACLF,GAASG,EAAAA,EAAAA,MACX,CACF,GAAG,IAeH,OACE,4BACE,0BACE,SAAC,EAAe,OAElB,0BACE,SAAC,KAAM,CAACC,oBAAkB,EAACC,cAAe,CAAEC,KAAM,IAAMC,SAnB/C,SACbC,EAAyB,GAErB,IADFC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAGjB,GADAD,GAAc,GACVD,EAAOF,MAA+B,KAAvBE,EAAOF,KAAKK,OAAe,CAC5C,IAAMC,EAAeJ,EAAOF,KAAKO,QAAQ,OAAQ,KAAKF,OACtDG,QAAQC,IAAI,WAAaH,GACzBZ,GAASgB,EAAAA,EAAAA,IAAYJ,GACvB,CACAF,GACF,EAQ+E,SACtE,kBACC,UAAC,KAAI,YACH,SAAC,KAAK,CAACO,KAAK,OAAOC,KAAK,UACxB,SAACC,EAAA,EAAM,CAACF,KAAK,SAASG,SAAqB,YAAXrB,EAAqB,4BAGhD,OAIb,yBACc,UAAXA,GACC,gBAAKD,UAAS,UAAKuB,EAAiB,YAAIA,GAAkB,2BAE1D,gBAAKvB,UAAS,UAAKuB,EAAiB,YAAIA,GAAmB,gCAKrE,C","sources":["components/Chat/ChatMessagePage.tsx","webpack://react_app/./src/components/Chat/ChatPage.module.css?bcb2","components/Chat/ChatPage.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\nimport { Avatar, List } from 'antd'\n\nimport { MessagesData } from '../../types/types'\nimport { useAppSelector } from '../../hook/hook'\n\nimport './ChatMessagePage.scss'\n\nexport const ChatMessagePage: React.FC = () => {\n  const listRef = useRef<HTMLHeadingElement>(null)\n\n  const messages = useAppSelector(state => state.chat.messages)\n\n  useEffect(() => {\n    if (listRef.current) {\n      listRef.current.scrollTop = listRef.current.scrollHeight\n    }\n  }, [messages])\n\n  return (\n    <div ref={listRef} style={{ maxHeight: '700px', overflowY: 'auto' }}>\n      <List\n        itemLayout=\"horizontal\"\n        dataSource={messages}\n        renderItem={(item: MessagesData, index) => (\n          <List.Item>\n            <List.Item.Meta\n              avatar={<Avatar src={`https://xsgames.co/randomusers/avatar.php?g=pixel&key=${index}`} />}\n              title={item.text}\n              className={'j'}\n            />\n          </List.Item>\n        )}\n      />\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"statusContainer\":\"ChatPage_statusContainer__bhach\",\"offlineMessage\":\"ChatPage_offlineMessage__3yO3D\",\"onlineMessage\":\"ChatPage_onlineMessage__Cwe-D\",\"text\":\"ChatPage_text__6H7N4\",\"ant-list-item-meta-content\":\"ChatPage_ant-list-item-meta-content__5MYTp\",\"ant-list-item-meta-title\":\"ChatPage_ant-list-item-meta-title__SMmsJ\"};","import { useEffect } from 'react'\nimport { Field, Form, Formik } from 'formik'\n\nimport { useAppDispatch, useAppSelector } from '../../hook/hook'\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux-toolkit/chatSlice'\nimport { Button } from '../common/Button/Button'\n\nimport { ChatMessagePage } from './ChatMessagePage'\n\nimport s from './ChatPage.module.css'\n\nconst ChatPage = () => {\n  const status = useAppSelector(state => state.chat.status)\n\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [])\n\n  const submit = (\n    values: { term: string },\n    { setSubmitting, resetForm }: { setSubmitting: (isSubmitting: boolean) => void; resetForm: () => void },\n  ) => {\n    setSubmitting(false)\n    if (values.term && values.term.trim() !== '') {\n      const cleanMessage = values.term.replace(/\\s+/g, ' ').trim()\n      console.log('message ' + cleanMessage)\n      dispatch(sendMessage(cleanMessage))\n    }\n    resetForm()\n  }\n\n  return (\n    <div>\n      <div>\n        <ChatMessagePage />\n      </div>\n      <div>\n        <Formik enableReinitialize initialValues={{ term: '' }} onSubmit={submit}>\n          {() => (\n            <Form>\n              <Field type=\"text\" name=\"term\" />\n              <Button type=\"submit\" disabled={status === 'pending'}>\n                Send Message\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n      <div>\n        {status === 'ready' ? (\n          <div className={`${s.statusContainer} ${s.onlineMessage}`}>Server is on</div>\n        ) : (\n          <div className={`${s.statusContainer} ${s.offlineMessage}`}>Server is down</div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default ChatPage\n"],"names":["ChatMessagePage","listRef","useRef","messages","useAppSelector","state","chat","useEffect","current","scrollTop","scrollHeight","ref","style","maxHeight","overflowY","itemLayout","dataSource","renderItem","item","index","avatar","src","title","text","className","status","dispatch","useAppDispatch","startMessagesListening","stopMessagesListening","enableReinitialize","initialValues","term","onSubmit","values","setSubmitting","resetForm","trim","cleanMessage","replace","console","log","sendMessage","type","name","Button","disabled","s"],"sourceRoot":""}