{"version":3,"file":"static/js/502.f0c46c42.chunk.js","mappings":"6PAMMA,EAAkB,SAACC,GAAmB,MACzC,CACCC,OAAQD,EAAME,KAAKD,OACnBE,uBAAwBH,EAAME,KAAKC,uBACpC,E,IAMmEC,E,8BCftE,GAAgB,OAAS,wBAAwB,QAAU,yBAAyB,MAAQ,uBAAuB,UAAY,4BCYlHC,EAAkB,WAC7B,IAAMC,GAAWC,EAAAA,EAAAA,KAuBjB,OACE,0BACE,SAAC,KAAM,CAACC,oBAAkB,EAACC,cAAe,CAAEC,UAAW,IAAMC,SAvBlD,SACbC,EAA8B,GAE1B,IADFC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAEjBR,GAASS,EAAAA,EAAAA,GAAWH,EAAOF,YAC3BG,GAAc,GACdC,GACF,EAgBmFE,SAdlE,SAACJ,GAChB,IAAMK,EAAoB,CAAC,EAQ3B,OANKL,EAAOF,UAEDE,EAAOF,UAAUQ,OAAS,KACnCD,EAAOP,UAAY,oBAFnBO,EAAOP,UAAY,6BAKdO,CACT,EAIsG,SAC/F,gBAAGA,EAAM,EAANA,OAAQE,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAY,OAC/B,UAAC,KAAI,YACH,SAAC,KAAK,CACJC,KAAK,OACLC,KAAK,YACLC,UAAWN,EAAOP,WAAaS,EAAQT,UAAS,UAAMc,EAAAA,WAAgB,KAEvEP,EAAOP,WAAaS,EAAQT,YAAa,gBAAKa,UAAWC,EAAAA,MAAQ,SAAEP,EAAOP,aAC3E,0BACE,SAACe,EAAA,EAAM,CAACJ,KAAK,SAASK,SAAUN,EAAa,8BAI1C,KAKjB,E,UCxCA,EAT8B,SAAH,GAAsB,IAAhBO,EAAE,EAAFA,GAAIL,EAAI,EAAJA,KAC7BM,EAAO,YAAcD,EAC3B,OACE,gBAAKJ,UAAWC,EAAAA,OAAS,UACvB,SAAC,KAAO,CAACK,GAAID,EAAK,SAAEN,KAG1B,ECKMQ,EAAyB,SAAAC,GAC7B,OAAO,iBAAKR,UAAWC,EAAAA,QAAU,cAAGO,EAAMC,OAC5C,EAEA,EAdyB,WACvB,IAEMC,GAFeC,EAAAA,EAAAA,IAAe,SAAAlC,GAAK,OAAIA,EAAMmC,QAAQC,YAAY,IAElCC,KAAI,SAACC,EAAkBC,GAAa,OACvE,SAACT,EAAW,CAAaE,KAAMM,EAAGN,MAAhBO,EAAwB,IAG5C,OAAO,yBAAMN,GACf,ECaA,GLhBsE7B,EKJ9C,WACtB,IAEMoC,GAFcN,EAAAA,EAAAA,IAAe,SAAAlC,GAAK,OAAIA,EAAMmC,QAAQM,WAAW,IAElCJ,KAAI,SAACC,EAAiBC,GAAa,OACpE,SAAC,EAAU,CAAajB,KAAMgB,EAAGhB,KAAMK,GAAIW,EAAGX,IAA7BY,EAAmC,IAGtD,OACE,iBAAKhB,UAAWC,EAAAA,UAAY,WAC1B,gBAAKD,UAAWC,EAAAA,QAAU,SAAEgB,KAC5B,gBAAKjB,UAAWC,EAAAA,SAAW,UACzB,SAAC,EAAY,OAEf,0BACE,SAACnB,EAAW,QAIpB,GLHSqC,EAAAA,EAAAA,IAA0C3C,EAAiB,CAAC,EAA5D2C,EAV8B,SAAAX,GACnC,IAAQ9B,EAAiD8B,EAAjD9B,OAAQE,EAAyC4B,EAAzC5B,uBAA2BwC,GAAS,OAAKZ,EAAK,GAC9D,OAAI5B,IACGF,GACI,SAAC,KAAQ,CAAC4B,GAAG,YAIjB,SAACzB,GAAgB,UAAMuC,GAChC,I","sources":["hoc/withAuthRedirect.tsx","webpack://react_app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsForm/DialogsForm.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItems.tsx","components/Dialogs/DialogsPage.tsx"],"sourcesContent":["import { ComponentType, FC } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport { AppStateType } from '../redux-toolkit/store-redux'\n\nconst mapStateToProps = (state: AppStateType) =>\n  ({\n    isAuth: state.auth.isAuth,\n    isAuthResponseReceived: state.auth.isAuthResponseReceived,\n  }) as Props\n\ntype Props = {\n  isAuth: boolean\n  isAuthResponseReceived: boolean\n}\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes>(WrappedComponent: ComponentType<WCP>) {\n  const RedirectComponent: FC<Props> = props => {\n    const { isAuth, isAuthResponseReceived, ...restProps } = props\n    if (isAuthResponseReceived) {\n      if (!isAuth) {\n        return <Navigate to=\"/login\" />\n      }\n    }\n\n    return <WrappedComponent {...(restProps as WCP)} />\n  }\n  return connect<Props, object, WCP, AppStateType>(mapStateToProps, {})(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialogs_dialog__htSTl\",\"message\":\"Dialogs_message__ZEWo0\",\"error\":\"Dialogs_error__fLVDP\",\"errorForm\":\"Dialogs_errorForm__1rqif\"};","import { FC } from 'react'\nimport { Field, Form, Formik } from 'formik'\n\nimport { Button } from '../../common/Button/Button'\nimport { useAppDispatch } from '../../../hook/hook'\nimport { createPost } from '../../../redux-toolkit/dialogSlice'\n\nimport s from '.././Dialogs.module.css'\n\ntype ErrorType = {\n  textValue?: string\n}\n\nexport const DialogsForm: FC = () => {\n  const dispatch = useAppDispatch()\n\n  const submit = (\n    values: { textValue: string },\n    { setSubmitting, resetForm }: { setSubmitting: (isSubmitting: boolean) => void; resetForm: () => void },\n  ) => {\n    dispatch(createPost(values.textValue))\n    setSubmitting(false)\n    resetForm()\n  }\n\n  const validate = (values: { textValue: string }) => {\n    const errors: ErrorType = {}\n\n    if (!values.textValue) {\n      errors.textValue = 'You need to type something'\n    } else if (values.textValue.length > 11) {\n      errors.textValue = 'Message too long'\n    }\n\n    return errors\n  }\n\n  return (\n    <div>\n      <Formik enableReinitialize initialValues={{ textValue: '' }} onSubmit={submit} validate={validate}>\n        {({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field\n              type=\"text\"\n              name=\"textValue\"\n              className={errors.textValue && touched.textValue ? `${s.errorForm}` : ''}\n            />\n            {errors.textValue && touched.textValue && <div className={s.error}>{errors.textValue}</div>}\n            <div>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                Send Message\n              </Button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  )\n}\n","import { FC } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport s from '../Dialogs.module.css'\n\ntype Props = {\n  id: number\n  name: string\n}\nconst DialogItem: FC<Props> = ({ id, name }) => {\n  const path = '/dialogs/' + id\n  return (\n    <div className={s.dialog}>\n      <NavLink to={path}>{name}</NavLink>\n    </div>\n  )\n}\n\nexport default DialogItem\n","import { FC } from 'react'\n\nimport { useAppSelector } from '../../../hook/hook'\nimport { MessagesData } from '../../../types/types'\n\nimport s from '../Dialogs.module.css'\n\ntype Props = {\n  text: string\n}\n\nconst MessageItems: FC = () => {\n  const messagesData = useAppSelector(state => state.dialogs.messagesData)\n\n  const MessagesElement = messagesData.map((el: MessagesData, index: number) => (\n    <MessageItem key={index} text={el.text} />\n  ))\n\n  return <div>{MessagesElement}</div>\n}\n\nconst MessageItem: FC<Props> = props => {\n  return <div className={s.message}> {props.text}</div>\n}\n\nexport default MessageItems\n","import { FC } from 'react'\n\nimport { DialogsData } from '../../types/types'\nimport { useAppSelector } from '../../hook/hook'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\n\nimport { DialogsForm } from './DialogsForm/DialogsForm'\nimport DialogItem from './DialogItem/DialogItem'\nimport MessageItems from './MessageItem/MessageItems'\n\nimport s from './Dialogs.module.css'\n\nconst DialogsPage: FC = () => {\n  const dialogsData = useAppSelector(state => state.dialogs.dialogsData)\n\n  const DialogsElement = dialogsData.map((el: DialogsData, index: number) => (\n    <DialogItem key={index} name={el.name} id={el.id} />\n  ))\n\n  return (\n    <div className={s.container}>\n      <div className={s.dialogs}>{DialogsElement}</div>\n      <div className={s.messages}>\n        <MessageItems />\n      </div>\n      <div>\n        <DialogsForm />\n      </div>\n    </div>\n  )\n}\n\nexport default withAuthRedirect(DialogsPage)\n"],"names":["mapStateToProps","state","isAuth","auth","isAuthResponseReceived","WrappedComponent","DialogsForm","dispatch","useAppDispatch","enableReinitialize","initialValues","textValue","onSubmit","values","setSubmitting","resetForm","createPost","validate","errors","length","touched","isSubmitting","type","name","className","s","Button","disabled","id","path","to","MessageItem","props","text","MessagesElement","useAppSelector","dialogs","messagesData","map","el","index","DialogsElement","dialogsData","connect","restProps"],"sourceRoot":""}