{"version":3,"file":"static/js/113.dfea6530.chunk.js","mappings":"8MACA,EAA6D,qB,SCsF7D,EAxEgC,WAC9B,IAAMA,GAASC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,MAAM,IAClDI,GAAYH,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKE,KAAK,IACpDC,GAAcL,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKI,SAAS,IAC1DC,GAAUP,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKK,OAAO,IACpDC,GAAWC,EAAAA,EAAAA,KAEjB,GAAIV,EACF,OAAO,SAAC,KAAQ,CAACW,GAAG,aA0BtB,OACE,0BACE,SAAC,KAAM,CACLC,oBAAkB,EAClBC,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIP,QAAS,IACnDQ,SAdS,SACbC,EAA8D,GAE1D,IADFC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAEjBV,GAASK,EAAAA,EAAAA,IAAM,CAAEM,MAAOH,EAAOH,MAAOC,SAAUE,EAAOF,SAAUM,YAAY,EAAOb,QAAe,OAANS,QAAM,IAANA,OAAM,EAANA,EAAQT,WACrGU,GAAc,GACdC,GACF,EAQMG,SA7BW,SAACL,GAChB,IAAMM,EAAoB,CAAC,EAU3B,OATKN,EAAOH,QACVS,EAAOT,MAAQ,0BAEZG,EAAOF,WACVQ,EAAOR,SAAW,6BAEfE,EAAOT,SAA2B,KAAhBF,IACrBiB,EAAOf,QAAU,uBAEZe,CACT,EAiByB,SAElB,gBAAGA,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAY,OAC/B,UAAC,KAAI,YACH,0BACE,SAAC,KAAK,CAACC,KAAK,OAAOC,KAAK,YAEzBJ,EAAOT,OAASU,EAAQV,QAAS,gBAAKc,UAAWC,EAAQ,SAAEN,EAAOT,SACnE,0BACE,SAAC,KAAK,CAACY,KAAK,WAAWC,KAAK,eAE7BJ,EAAOR,UAAYS,EAAQT,WAAY,gBAAKa,UAAWC,EAAQ,SAAEN,EAAOR,WACxEP,IAAW,gBAAKsB,IAAKtB,EAASuB,IAAI,0BAClCvB,IACC,0BACE,SAAC,KAAK,CAACkB,KAAK,QAAQC,KAAK,eAG7B,0BACE,SAACK,EAAA,EAAM,CAACC,SAAUR,EAAcC,KAAK,SAAQ,qBAI9CH,EAAOf,UAAW,gBAAKoB,UAAWC,EAAQ,SAAEN,EAAOf,WACnD,iBAAKoB,UAAWC,EAAQ,cAAGzB,EAAS,SAChC,KAKjB,C","sources":["webpack://react_app/./src/components/Login/Login.module.css?3530","components/Login/LoginFormPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formError\":\"Login_formError__kA0Vb\",\"error\":\"Login_error__1Zqgg\"};","import { Field, Form, Formik } from 'formik'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../hook/hook'\r\nimport { Button } from '../common/Button/Button'\r\nimport { login } from '../../redux-toolkit/authSlice'\r\n\r\nimport s from './Login.module.css'\r\n\r\ntype ErrorType = {\r\n  login?: string\r\n  password?: string\r\n  captcha?: string\r\n}\r\n\r\nconst LoginFormPage: React.FC = () => {\r\n  const isAuth = useAppSelector(state => state.auth.isAuth)\r\n  const errorCode = useAppSelector(state => state.auth.error)\r\n  const errorStatus = useAppSelector(state => state.auth.errorType)\r\n  const captcha = useAppSelector(state => state.auth.captcha)\r\n  const dispatch = useAppDispatch()\r\n\r\n  if (isAuth) {\r\n    return <Navigate to=\"/profile\" />\r\n  }\r\n\r\n  const validate = (values: { login: string; password: string; captcha: string }) => {\r\n    const errors: ErrorType = {}\r\n    if (!values.login) {\r\n      errors.login = 'You need to type email'\r\n    }\r\n    if (!values.password) {\r\n      errors.password = 'You need to type password'\r\n    }\r\n    if (!values.captcha && errorStatus === 10) {\r\n      errors.captcha = 'Captcha is required'\r\n    }\r\n    return errors\r\n  }\r\n\r\n  const submit = (\r\n    values: { login: string; password: string; captcha?: string },\r\n    { setSubmitting, resetForm }: { setSubmitting: (isSubmitting: boolean) => void; resetForm: () => void },\r\n  ) => {\r\n    dispatch(login({ email: values.login, password: values.password, rememberMe: false, captcha: values?.captcha }))\r\n    setSubmitting(false)\r\n    resetForm()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{ login: '', password: '', captcha: '' }}\r\n        onSubmit={submit}\r\n        validate={validate}\r\n      >\r\n        {({ errors, touched, isSubmitting }) => (\r\n          <Form>\r\n            <div>\r\n              <Field type=\"text\" name=\"login\" />\r\n            </div>\r\n            {errors.login && touched.login && <div className={s.error}>{errors.login}</div>}\r\n            <div>\r\n              <Field type=\"password\" name=\"password\" />\r\n            </div>\r\n            {errors.password && touched.password && <div className={s.error}>{errors.password}</div>}\r\n            {captcha && <img src={captcha} alt=\"Server is not working\" />}\r\n            {captcha && (\r\n              <div>\r\n                <Field type=\"input\" name=\"captcha\" />\r\n              </div>\r\n            )}\r\n            <div>\r\n              <Button disabled={isSubmitting} type=\"submit\">\r\n                Login\r\n              </Button>\r\n            </div>\r\n            {errors.captcha && <div className={s.error}>{errors.captcha}</div>}\r\n            {<div className={s.error}> {errorCode} </div>}\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginFormPage\r\n"],"names":["isAuth","useAppSelector","state","auth","errorCode","error","errorStatus","errorType","captcha","dispatch","useAppDispatch","to","enableReinitialize","initialValues","login","password","onSubmit","values","setSubmitting","resetForm","email","rememberMe","validate","errors","touched","isSubmitting","type","name","className","s","src","alt","Button","disabled"],"sourceRoot":""}