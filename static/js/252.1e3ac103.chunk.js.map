{"version":3,"file":"static/js/252.1e3ac103.chunk.js","mappings":"2RAMMA,EAAkB,SAACC,GAAmB,MACzC,CACCC,OAAQD,EAAME,KAAKD,OACnBE,uBAAwBH,EAAME,KAAKC,uBACpC,E,IAMmEC,E,UCftE,GAAgB,OAAS,wBAAwB,QAAU,yBAAyB,MAAQ,uBAAuB,UAAY,4BCiB/H,EAT8B,SAAH,GAAsB,IAAhBC,EAAE,EAAFA,GAAIC,EAAI,EAAJA,KAC7BC,EAAO,YAAcF,EAC3B,OACE,gBAAKG,UAAWC,EAAAA,OAAS,UACvB,SAAC,KAAO,CAACC,GAAIH,EAAK,SAAED,KAG1B,ECLA,EAJ+B,SAAAK,GAC7B,OAAO,iBAAKH,UAAWC,EAAAA,QAAU,cAAGE,EAAMC,OAC5C,ECoEA,GJ7DsER,EIE9C,WACtB,IAAMS,GAAcC,EAAAA,EAAAA,IAAe,SAAAd,GAAK,OAAIA,EAAMe,OAAO,IACnDC,GAAWC,EAAAA,EAAAA,KAEXC,EAAiBL,EAAYM,YAAYC,KAAI,SAACC,EAAiBC,GAAa,OAChF,SAAC,EAAU,CAAahB,KAAMe,EAAGf,KAAMD,GAAIgB,EAAGhB,IAA7BiB,EAAmC,IAEhDC,EAAkBV,EAAYW,aAAaJ,KAAI,SAACC,EAAkBC,GAAa,OACnF,SAAC,EAAW,CAAaV,KAAMS,EAAGT,MAAhBU,EAAwB,IAwB5C,OACE,iBAAKd,UAAWC,EAAAA,UAAY,WAC1B,gBAAKD,UAAWC,EAAAA,QAAU,SAAES,KAC5B,gBAAKV,UAAWC,EAAAA,SAAW,SAAEc,KAC7B,0BACE,SAAC,KAAM,CAACE,oBAAkB,EAACC,cAAe,CAAEC,UAAW,IAAMC,SA1BpD,SACbC,EAA8B,GAE1B,IADFC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAEjBf,GAASgB,EAAAA,EAAAA,GAAWH,EAAOF,YAC3BG,GAAc,GACdC,GACF,EAmBqFE,SAjBpE,SAACJ,GAChB,IAAMK,EAAoB,CAAC,EAQ3B,OANKL,EAAOF,UAEDE,EAAOF,UAAUQ,OAAS,KACnCD,EAAOP,UAAY,oBAFnBO,EAAOP,UAAY,6BAKdO,CACT,EAOwG,SAC/F,gBAAGA,EAAM,EAANA,OAAQE,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAY,OAC/B,UAAC,KAAI,YACH,SAAC,KAAK,CACJC,KAAK,OACLhC,KAAK,YACLE,UAAW0B,EAAOP,WAAaS,EAAQT,UAAS,UAAMlB,EAAAA,WAAgB,KAEvEyB,EAAOP,WAAaS,EAAQT,YAAa,gBAAKnB,UAAWC,EAAAA,MAAQ,SAAEyB,EAAOP,aAC3E,0BACE,SAACY,EAAA,EAAM,CAACD,KAAK,SAASE,SAAUH,EAAa,8BAI1C,QAMnB,GJhDSI,EAAAA,EAAAA,IAA0C1C,EAAiB,CAAC,EAA5D0C,EAV8B,SAAA9B,GACnC,IAAQV,EAAiDU,EAAjDV,OAAQE,EAAyCQ,EAAzCR,uBAA2BuC,GAAS,OAAK/B,EAAK,GAC9D,OAAIR,IACGF,GACI,SAAC,KAAQ,CAACS,GAAG,YAIjB,SAACN,GAAgB,UAAMsC,GAChC,I","sources":["hoc/withAuthRedirect.tsx","webpack://react_app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/DialogsPage.tsx"],"sourcesContent":["import { ComponentType, FC } from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { AppStateType } from '../redux-toolkit/store-redux'\r\n\r\nconst mapStateToProps = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth,\r\n    isAuthResponseReceived: state.auth.isAuthResponseReceived,\r\n  }) as Props\r\n\r\ntype Props = {\r\n  isAuth: boolean\r\n  isAuthResponseReceived: boolean\r\n}\r\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes>(WrappedComponent: ComponentType<WCP>) {\r\n  const RedirectComponent: FC<Props> = props => {\r\n    const { isAuth, isAuthResponseReceived, ...restProps } = props\r\n    if (isAuthResponseReceived) {\r\n      if (!isAuth) {\r\n        return <Navigate to=\"/login\" />\r\n      }\r\n    }\r\n\r\n    return <WrappedComponent {...(restProps as WCP)} />\r\n  }\r\n  return connect<Props, object, WCP, AppStateType>(mapStateToProps, {})(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialogs_dialog__flZ4m\",\"message\":\"Dialogs_message__FFmFK\",\"error\":\"Dialogs_error__frdWS\",\"errorForm\":\"Dialogs_errorForm__5p+-W\"};","import { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport s from '../Dialogs.module.css'\r\n\r\ntype Props = {\r\n  id: number\r\n  name: string\r\n}\r\nconst DialogItem: FC<Props> = ({ id, name }) => {\r\n  const path = '/dialogs/' + id\r\n  return (\r\n    <div className={s.dialog}>\r\n      <NavLink to={path}>{name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem\r\n","import { FC } from 'react'\r\n\r\nimport s from '../Dialogs.module.css'\r\n\r\ntype Props = {\r\n  text: string\r\n}\r\nconst MessageItem: FC<Props> = props => {\r\n  return <div className={s.message}> {props.text}</div>\r\n}\r\n\r\nexport default MessageItem\r\n","import { FC } from 'react'\r\nimport { Field, Form, Formik } from 'formik'\r\n\r\nimport { Button } from '../common/Button/Button'\r\nimport { DialogsData, MessagesData } from '../../types/types'\r\nimport { createPost } from '../../redux-toolkit/dialogSlice'\r\nimport { useAppDispatch, useAppSelector } from '../../hook/hook'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\n\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport MessageItem from './MessageItem/MessageItem'\r\n\r\nimport s from './Dialogs.module.css'\r\n\r\ntype ErrorType = {\r\n  textValue?: string\r\n}\r\n\r\nconst DialogsPage: FC = () => {\r\n  const dialogsPage = useAppSelector(state => state.dialogs)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const DialogsElement = dialogsPage.dialogsData.map((el: DialogsData, index: number) => (\r\n    <DialogItem key={index} name={el.name} id={el.id} />\r\n  ))\r\n  const MessagesElement = dialogsPage.messagesData.map((el: MessagesData, index: number) => (\r\n    <MessageItem key={index} text={el.text} />\r\n  ))\r\n\r\n  const submit = (\r\n    values: { textValue: string },\r\n    { setSubmitting, resetForm }: { setSubmitting: (isSubmitting: boolean) => void; resetForm: () => void },\r\n  ) => {\r\n    dispatch(createPost(values.textValue))\r\n    setSubmitting(false)\r\n    resetForm()\r\n  }\r\n\r\n  const validate = (values: { textValue: string }) => {\r\n    const errors: ErrorType = {}\r\n\r\n    if (!values.textValue) {\r\n      errors.textValue = 'You need to type something'\r\n    } else if (values.textValue.length > 11) {\r\n      errors.textValue = 'Message too long'\r\n    }\r\n\r\n    return errors\r\n  }\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.dialogs}>{DialogsElement}</div>\r\n      <div className={s.messages}>{MessagesElement}</div>\r\n      <div>\r\n        <Formik enableReinitialize initialValues={{ textValue: '' }} onSubmit={submit} validate={validate}>\r\n          {({ errors, touched, isSubmitting }) => (\r\n            <Form>\r\n              <Field\r\n                type=\"text\"\r\n                name=\"textValue\"\r\n                className={errors.textValue && touched.textValue ? `${s.errorForm}` : ''}\r\n              />\r\n              {errors.textValue && touched.textValue && <div className={s.error}>{errors.textValue}</div>}\r\n              <div>\r\n                <Button type=\"submit\" disabled={isSubmitting}>\r\n                  Send Message\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withAuthRedirect(DialogsPage)\r\n"],"names":["mapStateToProps","state","isAuth","auth","isAuthResponseReceived","WrappedComponent","id","name","path","className","s","to","props","text","dialogsPage","useAppSelector","dialogs","dispatch","useAppDispatch","DialogsElement","dialogsData","map","el","index","MessagesElement","messagesData","enableReinitialize","initialValues","textValue","onSubmit","values","setSubmitting","resetForm","createPost","validate","errors","length","touched","isSubmitting","type","Button","disabled","connect","restProps"],"sourceRoot":""}