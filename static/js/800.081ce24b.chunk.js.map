{"version":3,"file":"static/js/800.081ce24b.chunk.js","mappings":"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","sources":["webpack://react_app/./src/components/common/Paginator/Paginator.module.css?6caa","components/common/Paginator/Paginator.tsx","components/Users/UsersSearchForm.tsx","webpack://react_app/./src/components/Users/Users.module.css?b9d0","components/Users/User.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"selected\":\"Paginator_selected__hug0A\"};","import { useEffect, useState } from 'react'\r\n\r\nimport { Button } from '../Button/Button'\r\n\r\nimport s from './Paginator.module.css'\r\n\r\ntype Props = {\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  portionSize?: number\r\n  onPageChanged: (page: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<Props> = ({ totalUsersCount, pageSize, currentPage, onPageChanged, portionSize = 10 }) => {\r\n  const totalUsersPages = Math.ceil(totalUsersCount / pageSize)\r\n  const pages = Array.from({ length: totalUsersPages }, (_, index) => index + 1)\r\n\r\n  const [currentPortion, setCurrentPortion] = useState(1)\r\n  const leftBorderPortion = (currentPortion - 1) * portionSize + 1\r\n  const rightBorderPortion = currentPortion * portionSize\r\n\r\n  useEffect(() => {\r\n    setCurrentPortion(Math.ceil(currentPage / portionSize))\r\n  }, [currentPage, portionSize])\r\n\r\n  const portionPages = pages.slice(leftBorderPortion - 1, rightBorderPortion)\r\n\r\n  return (\r\n    <div>\r\n      {leftBorderPortion > 1 && (\r\n        <Button\r\n          onClick={() => {\r\n            setCurrentPortion(currentPortion - 1)\r\n          }}\r\n        >\r\n          Prev\r\n        </Button>\r\n      )}\r\n      {portionPages.map(p => {\r\n        return (\r\n          <span\r\n            style={{ padding: 2 }}\r\n            key={p}\r\n            onClick={() => {\r\n              onPageChanged(p)\r\n            }}\r\n            className={p === currentPage ? s.selected : undefined}\r\n          >\r\n            {p}\r\n          </span>\r\n        )\r\n      })}\r\n      {rightBorderPortion < totalUsersPages && (\r\n        <Button\r\n          onClick={() => {\r\n            setCurrentPortion(currentPortion + 1)\r\n          }}\r\n        >\r\n          Next\r\n        </Button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Paginator\r\n","import React, { FC } from 'react'\r\nimport { Field, Formik } from 'formik'\r\nimport { Form } from 'formik'\r\n\r\nimport { useAppSelector } from '../../hook/hook'\r\nimport { Button } from '../common/Button/Button'\r\nimport { Filter } from '../../redux-toolkit/usersSlice'\r\n\r\ntype Props = {\r\n  onFilterChanged: (filter: Filter) => void\r\n}\r\n\r\nexport const UsersSearchForm: FC<Props> = React.memo(function UsersSearchForm(props) {\r\n  const filter = useAppSelector(state => state.users.filter)\r\n\r\n  const submit = (values: Filter, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n    props.onFilterChanged(values)\r\n    setSubmitting(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Formik enableReinitialize initialValues={{ term: filter.term, friend: String(filter.friend) }} onSubmit={submit}>\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type=\"text\" name=\"term\" />\r\n            <Field as=\"select\" name=\"friend\">\r\n              <option value=\"\">All</option>\r\n              <option value=\"true\">Followed</option>\r\n              <option value=\"false\">Not Followed</option>\r\n            </Field>\r\n            <Button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n})\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Users_container__EWrLF\",\"message_body\":\"Users_message_body__hrjVa\",\"image\":\"Users_image__9zWpH\",\"name\":\"Users_name__-KWvK\",\"selected\":\"Users_selected__3R57u\",\"cursorMenu\":\"Users_cursorMenu__M40TB\"};","import { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport { useAppDispatch } from '../../hook/hook'\r\nimport { follow, unfollow } from '../../redux-toolkit/usersSlice'\r\nimport { Users } from '../../types/types'\r\nimport { Button } from '../common/Button/Button'\r\nimport { path } from '../../constants/pages'\r\n\r\nimport smile from '../../assets/images/Smiley.jpg'\r\n\r\nimport s from './Users.module.css'\r\n\r\ntype Props = {\r\n  users: Users[]\r\n  isFollowing: number[]\r\n}\r\n\r\nexport const User: FC<Props> = ({ users, isFollowing }) => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const followFc = (id: number) => {\r\n    dispatch(follow(id))\r\n  }\r\n  const unfollowFc = (id: number) => {\r\n    dispatch(unfollow(id))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {users.map((u: Users, index: number) => (\r\n        <div key={index} className={s.container}>\r\n          <div className={s.image}>\r\n            <NavLink to={'/' + path.profile + '/' + u.id}>\r\n              <img src={u.photos.large || smile} alt={'smile face'} />\r\n            </NavLink>\r\n            <div>\r\n              {u.followed ? (\r\n                <Button disabled={isFollowing.includes(u.id)} onClick={() => unfollowFc(u.id)}>\r\n                  UNFOLLOW\r\n                </Button>\r\n              ) : (\r\n                <Button disabled={isFollowing.includes(u.id)} onClick={() => followFc(u.id)}>\r\n                  FOLLOW\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className={s.message_body}>\r\n            <div className={s.name}>{u.name}</div>\r\n            <div className={s.message}>{u.status}</div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import { useSearchParams } from 'react-router-dom'\r\nimport { FC, useEffect } from 'react'\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../hook/hook'\r\nimport { Filter, getUsers } from '../../redux-toolkit/usersSlice'\r\nimport Paginator from '../common/Paginator/Paginator'\r\n\r\nimport { UsersSearchForm } from './UsersSearchForm'\r\nimport { User } from './User'\r\n\r\nimport s from './Users.module.css'\r\n\r\nexport const Users: FC = () => {\r\n  const currentPage = useAppSelector(state => state.users.currentPage)\r\n  const pageSize = useAppSelector(state => state.users.pageSize)\r\n  const filter = useAppSelector(state => state.users.filter)\r\n  const isFollowing = useAppSelector(state => state.users.isFollowing)\r\n  const totalUsersCount = useAppSelector(state => state.users.totalUsersCount)\r\n  const users = useAppSelector(state => state.users.users)\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams()\r\n  const parsed = Object.fromEntries(searchParams)\r\n\r\n  useEffect(() => {\r\n    let actualPage = currentPage\r\n    let actualFilter = filter\r\n\r\n    if (parsed.page) actualPage = +parsed.page\r\n    if (parsed.term) actualFilter = { ...actualFilter, term: parsed.term }\r\n    switch (parsed.friend) {\r\n      case 'null':\r\n        actualFilter = { ...actualFilter, friend: null }\r\n        break\r\n      case 'true':\r\n        actualFilter = { ...actualFilter, friend: true }\r\n        break\r\n      case 'false':\r\n        actualFilter = { ...actualFilter, friend: false }\r\n        break\r\n    }\r\n    dispatch(getUsers({ currentPage: actualPage, pageSize, filter: actualFilter }))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const term = filter.term\r\n    const friend = filter.friend\r\n\r\n    const urlQuery =\r\n      (term ? `&term=${term}` : '') +\r\n      (friend !== null && friend !== 'null' && friend !== '' ? `&friend=${friend}` : '') +\r\n      (currentPage !== 1 ? `&page=${currentPage}` : '')\r\n\r\n    setSearchParams(urlQuery)\r\n  }, [filter, currentPage])\r\n\r\n  const onPageChanged = (currentPage: number) => {\r\n    dispatch(getUsers({ currentPage, pageSize, filter }))\r\n  }\r\n  const onFilterChanged = (filter: Filter) => {\r\n    dispatch(getUsers({ currentPage: 1, pageSize, filter }))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n\r\n      <div className={s.cursorMenu}>\r\n        <Paginator\r\n          totalUsersCount={totalUsersCount}\r\n          pageSize={pageSize}\r\n          currentPage={currentPage}\r\n          onPageChanged={onPageChanged}\r\n        />\r\n      </div>\r\n      <User users={users} isFollowing={isFollowing} />\r\n    </div>\r\n  )\r\n}\r\n","import { FC } from 'react'\r\n\r\nimport { useAppSelector } from '../../hook/hook'\r\nimport { Preloader } from '../common/Paginator/Preloader'\r\n\r\nimport { Users } from './Users'\r\n\r\nconst UsersPage: FC = () => {\r\n  const isFetching = useAppSelector(state => state.users.isFetching)\r\n  return (\r\n    <div>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UsersPage\r\n"],"names":["totalUsersCount","pageSize","currentPage","onPageChanged","portionSize","totalUsersPages","Math","ceil","pages","Array","from","length","_","index","useState","currentPortion","setCurrentPortion","leftBorderPortion","rightBorderPortion","useEffect","portionPages","slice","Button","onClick","map","p","style","padding","className","s","undefined","UsersSearchForm","React","props","filter","useAppSelector","state","users","enableReinitialize","initialValues","term","friend","String","onSubmit","values","setSubmitting","onFilterChanged","isSubmitting","type","name","as","value","disabled","User","isFollowing","dispatch","useAppDispatch","u","to","path","id","src","photos","large","smile","alt","followed","includes","unfollow","follow","status","Users","useSearchParams","searchParams","setSearchParams","parsed","Object","fromEntries","actualPage","actualFilter","page","getUsers","urlQuery","isFetching","Preloader"],"sourceRoot":""}